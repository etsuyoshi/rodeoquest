//
//  LocationDataClass.m
//  Rodeoquest
//
//  Created by 遠藤 豪 on 2014/01/15.
//  Copyright (c) 2014年 endo.tuyo. All rights reserved.
//

#define ALLOWED_ERROR 99999.9
#import "LocationDataClass.h"

@implementation LocationDataClass

-(id)init{
    self = [super init];
        
    //ランドマーク名称
    arrName =
    [NSMutableArray arrayWithObjects:
     @"三軒茶屋スタバ",
     @"秋葉原駅",
     @"渋谷スクランブル交差点",
     @"新宿アルタ前",
     @"ディズニーランド",
     @"ディズニーシー",
     @"サンシャイン60",
     @"ハチ公前",
     @"アルタ前",
     @"渋谷モヤイ像",
     @"ナナちゃん人形",
     @"ビッグマン",
     @"高千穂",
     @"富士山",
     @"三輪山",
     @"御嶽山",
     @"箱根",
     @"箱根神社",
     @"九頭竜神社",
     @"箱根元宮",
     @"伊勢神宮",
     @"霧島神宮",
     @"熱田神宮",
     @"三峯神社",
     @"諏訪神社",
     @"戸隠神社",
     @"石上神宮",
     @"浅間神社",
     @"五稜郭",
     @"分杭峠",
     @"金比羅宮",
     @"霊場恐山",
     @"高尾山",
     @"貴船神社",
     @"鞍馬寺",
     @"出雲大社",
     @"八重垣神社（松江市）",
     @"厳島神社",
     @"秋芳洞",
     @"屋久島",
     @"久能山東照宮 ",
     @"札幌市役所前",
     @"青森市役所前",
     @"盛岡市役所前",
     @"仙台市役所前",
     @"秋田市役所前",
     @"山形市役所前",
     @"福島市役所前",
     @"水戸市役所前",
     @"宇都宮市役所前",
     @"前橋市役所前",
     @"さいたま市役所前",
     @"千葉市役所前",
     @"東京都庁前",
     @"横浜市役所前",
     @"新潟市役所前",
     @"富山市役所前",
     @"金沢市役所前",
     @"福井市役所前",
     @"甲府市役所前",
     @"長野市役所前",
     @"岐阜市役所前",
     @"静岡市役所前",
     @"名古屋市役所前",
     @"津市役所前",
     @"大津市役所前",
     @"京都市役所前",
     @"大阪市役所前",
     @"神戸市役所前",
     @"奈良市役所前",
     @"和歌山市役所前",
     @"鳥取市役所前",
     @"松江市役所前",
     @"岡山市役所前",
     @"広島市役所前",
     @"山口市役所前",
     @"徳島市役所前",
     @"高松市役所前",
     @"松山市役所前",
     @"高知市役所前",
     @"福岡市役所前",
     @"佐賀市役所前",
     @"長崎市役所前",
     @"熊本市役所前",
     @"大分市役所前",
     @"宮崎市役所前",
     @"鹿児島市役所前",
     @"那覇市役所前",
     @"札幌駅",
     @"青森駅",
     @"盛岡駅",
     @"仙台駅",
     @"秋田駅",
     @"山形駅",
     @"福島駅",
     @"水戸駅",
     @"宇都宮駅",
     @"前橋駅",
     @"さいたま駅",
     @"千葉駅",
     @"東京駅",
     @"横浜駅",
     @"新潟駅",
     @"富山駅",
     @"金沢駅",
     @"福井駅",
     @"甲府駅",
     @"長野駅",
     @"岐阜駅",
     @"静岡駅",
     @"名古屋駅",
     @"津駅",
     @"大津駅",
     @"京都駅",
     @"大阪駅",
     @"神戸駅",
     @"奈良駅",
     @"和歌山駅",
     @"鳥取駅",
     @"松江駅",
     @"岡山駅",
     @"広島駅",
     @"山口駅",
     @"徳島駅",
     @"高松駅",
     @"松山駅",
     @"高知駅",
     @"福岡駅",
     @"佐賀駅",
     @"長崎駅",
     @"熊本駅",
     @"大分駅",
     @"宮崎駅",
     @"鹿児島駅",
     @"那覇駅",
     nil];
     
    
    //latitude, longitude
    arrLatitudeLongitude =
    [NSMutableArray arrayWithObjects:
     @35.644302,@139.669769,
     @35.698683,@139.774219,
     @35.659888,@139.700315,
     @35.692723,@139.701309,
     @35.632547,@139.88133,
     @35.626188,@139.885832,
     @35.729534,@35.729534,
     @35.659094,@139.700765,
     @35.69258,@139.701164,
     @35.658486,@139.700882,
     @35.168125,@136.884903,
     @34.702829,@135.498515,
     @32.71169,@131.307787,
     @35.360556,@138.727778,
     @34.535185,@135.867222,
     @35.893333,@137.479167,
     @35.232355,@139.106938,
     @35.204796,@139.025388,
     @34.301429,@133.943086,
     @35.223638,@139.023993,
     @34.45501,@136.725793,
     @31.85865,@130.871331,
     @35.125558,@136.908963,
     @35.925399,@138.9304,
     @36.075012,@138.091248,
     @36.742534,@138.085118,
     @34.598063,@135.851944,
     @35.647621,@138.697364,
     @41.796875,@140.757007,
     @35.741258,@138.081943,
     @34.183971,@133.809427,
     @41.307792,@141.089065,
     @35.625121,@139.243659,
     @35.121641,@135.762906,
     @35.11821,@135.770872,
     @35.402035,@132.685456,
     @35.429053,@133.073555,
     @34.296021,@132.319894,
     @34.227037,@131.304442,
     @30.371299,@130.666468,
     @34.964837,@138.467619,
     @43.063968,@141.347899,
     @40.824623,@140.740593,
     @39.703531,@141.152667,
     @38.268839,@140.872103,
     @39.718635,@140.102415,
     @38.240437,@140.363634,
     @37.750299,@140.467521,
     @36.341813,@140.446793,
     @36.565725,@139.883565,
     @36.391251,@139.060848,
     @35.857428,@139.648933,
     @35.605058,@140.123308,
     @35.689521,@139.691704,
     @35.447753,@139.642514,
     @37.902418,@139.023221,
     @36.69529,@137.211338,
     @36.594682,@136.625573,
     @36.065219,@136.221642,
     @35.664158,@138.568449,
     @36.651289,@138.181224,
     @35.391227,@136.722291,
     @34.976978,@138.383054,
     @35.180188,@136.906565,
     @34.730283,@136.508591,
     @35.004531,@135.86859,
     @35.021365,@135.755481,
     @34.686297,@135.519661,
     @34.691279,@135.183025,
     @34.685333,@135.832744,
     @34.226034,@135.167506,
     @35.503869,@134.237672,
     @35.472297,@133.050499,
     @34.661755,@133.934407,
     @34.39656,@132.459622,
     @34.186121,@131.4705,
     @34.065761,@134.559279,
     @34.340149,@134.043444,
     @33.84166,@132.765362,
     @33.559705,@133.53108,
     @33.606785,@130.418314,
     @33.249367,@130.298822,
     @32.744839,@129.873756,
     @32.789828,@130.741667,
     @33.238194,@131.612591,
     @31.91109,@131.423855,
     @31.560148,@130.557981,
     @26.212401,@127.680932,
     @43.063968,@141.347899,
     @40.824623,@140.740593,
     @39.703531,@141.152667,
     @38.268839,@140.872103,
     @39.718635,@140.102415,
     @38.240437,@140.363634,
     @37.750299,@140.467521,
     @36.341813,@140.446793,
     @36.565725,@139.883565,
     @36.391251,@139.060848,
     @35.857428,@139.648933,
     @35.605058,@140.123308,
     @35.689521,@139.691704,
     @35.447753,@139.642514,
     @37.902418,@139.023221,
     @36.69529,@137.211338,
     @36.594682,@136.625573,
     @36.065219,@136.221642,
     @35.664158,@138.568449,
     @36.651289,@138.181224,
     @35.391227,@136.722291,
     @34.976978,@138.383054,
     @35.180188,@136.906565,
     @34.730283,@136.508591,
     @35.004531,@135.86859,
     @35.021365,@135.755481,
     @34.686297,@135.519661,
     @34.691279,@135.183025,
     @34.685333,@135.832744,
     @34.226034,@135.167506,
     @35.503869,@134.237672,
     @35.472297,@133.050499,
     @34.661755,@133.934407,
     @34.39656,@132.459622,
     @34.186121,@131.4705,
     @34.065761,@134.559279,
     @34.340149,@134.043444,
     @33.84166,@132.765362,
     @33.559705,@133.53108,
     @33.606785,@130.418314,
     @33.249367,@130.298822,
     @32.744839,@129.873756,
     @32.789828,@130.741667,
     @33.238194,@131.612591,
     @31.91109,@131.423855,
     @31.560148,@130.557981,
     @26.212401,@127.680932,
     nil];
    
    
    arrLocation = [[NSMutableArray alloc] init];
    CLLocation *_location;
    double _longitude;
    double _latitude;
    for(int i = 0; i < [arrLatitudeLongitude count];i+=2){
        _latitude = [[arrLatitudeLongitude objectAtIndex:i] floatValue];
        _longitude = [[arrLatitudeLongitude objectAtIndex:i+1] floatValue];
        _location = [[CLLocation alloc]initWithLatitude:_latitude longitude:_longitude];
        NSLog(@"cllocation=%@", _location);
        [arrLocation addObject:_location];
    }
    
    for(int i = 0 ; i < [arrLocation count];i++){
        NSLog(@"location = %@", [arrLocation objectAtIndex:i]);
    }
    
    return self;
}

//最も近い場所のランドマーク名を返す
-(NSString *)getNameNearestLocation:(CLLocation *)_location{
    int targetNo = [self getNearestLocationNo:_location];
    if(targetNo > -1){
        return [arrName objectAtIndex:targetNo];
    }else{
        return nil;
    }
}

//最も近いランドマークまでの距離(最初に-1を代入しておく：処理が完了しているかどうかを示す)
-(double)getDistanceNearest:(CLLocation *)_location{
    double _distance = 0;
    double _nearrestDist = 999999;
    int _nearrestNo = -1;
    for(int i = 0; i < [arrLocation count];i++){
        _distance = [self getDistanceFrom:[arrLocation objectAtIndex:i] to:_location];
        NSLog(@"%d : distance = %f", i, _distance);
        
        if(_distance < ALLOWED_ERROR){//100mまでの範囲なら許容
            if(_nearrestDist > _distance){
                _nearrestDist = _distance;
                _nearrestNo = i;
                NSLog(@"現状最も距離が近い:name[%d]=%@, 距離=%fm",
                      i,arrName[i], _distance);
            }
        }
    }
    
    if(_nearrestNo != -1){
        return  _nearrestDist;
    }else{
        if([arrLocation count] == 0){
            NSLog(@"配列に格納されていません。");
        }else{
            NSLog(@"最近接値を取得できませんでした。");
        }
        return -1;
    }
    return -1;
}


-(int)getNearestLocationNo:(CLLocation *)_location{
    double _distance = 0;
    double _nearrestDist = 999999;
    int _nearrestNo = -1;
    for(int i = 0; i < [arrLocation count];i++){
        _distance = [self getDistanceFrom:[arrLocation objectAtIndex:i] to:_location];
        NSLog(@"%d : distance = %f", i, _distance);
        
        if(_distance < ALLOWED_ERROR){//100mまでの範囲なら許容
            if(_nearrestDist > _distance){
                _nearrestDist = _distance;
                _nearrestNo = i;
                NSLog(@"距離が近いので採用 %d", i);
            }
        }
    }
    
    if(_nearrestNo != -1){
        return  _nearrestNo;
    }else{
        if([arrLocation count] == 0){
            NSLog(@"配列に格納されていません。");
        }else{
            NSLog(@"最近接値を取得できませんでした。");
        }
        return -1;
    }
    return -1;
}


-(float)getDistanceFrom:(CLLocation *)location1 to:(CLLocation *)location2{
    CLLocationDistance distance = [location1 distanceFromLocation:location2];
    return distance;
}
@end
